import express from 'express';
import cors from 'cors';
import fs from 'fs';
import https from 'https';
import path from 'path';
import { fileURLToPath } from 'url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// Serve static files from dist directory (React build)
app.use(express.static(path.join(__dirname, 'dist')));

// FinViz –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    baseUrl: 'https://elite.finviz.com/quote_export.ashx',
    auth: process.env.FINVIZ_API_KEY || '56d25c88-21a3-47a8-ad5a-605f01591d43'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏
async function getStockPrice(symbol) {
    return new Promise((resolve, reject) => {
        const url = `${config.baseUrl}?t=${symbol}&auth=${config.auth}`;
        
        https.get(url, (response) => {
            let data = '';
            
            response.on('data', (chunk) => {
                data += chunk;
            });
            
            response.on('end', () => {
                try {
                    if (response.statusCode === 200) {
                        const lines = data.trim().split('\n');
                        
                        if (lines.length >= 1) {
                            const lastLine = lines[lines.length - 1];
                            const values = lastLine.split(',');
                            
                            if (values.length >= 5) {
                                const date = values[0];
                                const open = parseFloat(values[1]);
                                const high = parseFloat(values[2]);
                                const low = parseFloat(values[3]);
                                const close = parseFloat(values[4]);
                                const volume = parseInt(values[5]);
                                
                                // –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ, –Ω–∞ –æ—Å–Ω–æ–≤–µ open –∏ close)
                                const change = close - open;
                                const changePercent = ((change / open) * 100);
                                
                                resolve({
                                    symbol,
                                    price: close,
                                    change: change,
                                    changePercent: changePercent,
                                    date,
                                    open,
                                    high,
                                    low,
                                    volume,
                                    lastUpdate: new Date().toLocaleTimeString()
                                });
                            } else {
                                reject(new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CSV –¥–∞–Ω–Ω—ã—Ö'));
                            }
                        } else {
                            reject(new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'));
                        }
                    } else {
                        reject(new Error(`HTTP ${response.statusCode}: ${data}`));
                    }
                } catch (error) {
                    reject(error);
                }
            });
            
        }).on('error', (error) => {
            reject(error);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–æ–≤
async function loadTickers() {
    try {
        const nasdaqData = await fs.promises.readFile(
            path.join(__dirname, 'all nasdaq.csv'), 'utf-8'
        );
        const nyseData = await fs.promises.readFile(
            path.join(__dirname, 'all nyse.csv'), 'utf-8'
        );
        
        const nasdaqTickers = nasdaqData.split('\n')
            .map(line => line.trim())
            .filter(line => line && line !== 'Ticker');
            
        const nyseTickers = nyseData.split('\n')
            .map(line => line.trim())
            .filter(line => line && line !== 'Ticker');
            
        return {
            nasdaq: nasdaqTickers,
            nyse: nyseTickers,
            all: [...nasdaqTickers, ...nyseTickers]
        };
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤:', error.message);
        return { nasdaq: [], nyse: [], all: [] };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
async function searchTickers(query) {
    const tickers = await loadTickers();
    const searchQuery = query.toUpperCase();
    
    const exactMatch = tickers.all.find(ticker => ticker === searchQuery);
    if (exactMatch) {
        return [exactMatch];
    }
    
    const partialMatches = tickers.all
        .filter(ticker => ticker.includes(searchQuery))
        .slice(0, 10);
        
    return partialMatches;
}

// API Routes

// –ü–æ–∏—Å–∫ —Ç–∏–∫–µ—Ä–æ–≤
app.get('/api/search/:query', async (req, res) => {
    try {
        const { query } = req.params;
        const results = await searchTickers(query);
        
        res.json({
            success: true,
            query,
            results,
            count: results.length
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –æ–¥–Ω–æ–π –∞–∫—Ü–∏–∏
app.get('/api/stock/:symbol', async (req, res) => {
    try {
        const { symbol } = req.params;
        const stockData = await getStockPrice(symbol.toUpperCase());
        
        res.json({
            success: true,
            data: stockData
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message,
            symbol: req.params.symbol
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ü–∏–π
app.post('/api/stocks/batch', async (req, res) => {
    try {
        const { symbols } = req.body;
        
        if (!Array.isArray(symbols)) {
            return res.status(400).json({
                success: false,
                error: 'symbols –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º'
            });
        }
        
        const promises = symbols.map(symbol => 
            getStockPrice(symbol.toUpperCase()).catch(error => ({
                symbol: symbol.toUpperCase(),
                error: error.message
            }))
        );
        
        const results = await Promise.all(promises);
        
        const successful = results.filter(result => !result.error);
        const failed = results.filter(result => result.error);
        
        res.json({
            success: true,
            data: successful,
            failed: failed,
            count: successful.length,
            failedCount: failed.length
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
app.get('/api/tickers', async (req, res) => {
    try {
        const tickers = await loadTickers();
        
        res.json({
            success: true,
            data: {
                nasdaq: {
                    count: tickers.nasdaq.length,
                    tickers: tickers.nasdaq.slice(0, 100) // –ü–µ—Ä–≤—ã–µ 100 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                },
                nyse: {
                    count: tickers.nyse.length,
                    tickers: tickers.nyse.slice(0, 100) // –ü–µ—Ä–≤—ã–µ 100 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                },
                total: tickers.all.length
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Health check
app.get('/api/health', (req, res) => {
    res.json({
        success: true,
        status: 'OK',
        timestamp: new Date().toISOString(),
        uptime: process.uptime(),
        environment: process.env.NODE_ENV || 'development'
    });
});

// Catch-all handler: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –Ω–µ-API –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ Server running on port ${PORT}`);
    console.log(`üì° Environment: ${process.env.NODE_ENV || 'development'}`);
    console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:');
    console.log(`  GET  /api/health                    - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏`);
    console.log(`  GET  /api/search/:query             - –ø–æ–∏—Å–∫ —Ç–∏–∫–µ—Ä–æ–≤`);
    console.log(`  GET  /api/stock/:symbol             - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏`);
    console.log(`  POST /api/stocks/batch              - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ü–∏–π`);
    console.log(`  GET  /api/tickers                   - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤`);
});

export default app;