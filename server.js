import fs from 'fs';
import https from 'https';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    baseUrl: 'https://elite.finviz.com/quote_export.ashx',
    auth: '56d25c88-21a3-47a8-ad5a-605f01591d43',
    symbol: 'MSFT'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∞–∫—Ü–∏–∏
async function getStockPrice(symbol) {
    return new Promise((resolve, reject) => {
        const url = `${config.baseUrl}?t=${symbol}&auth=${config.auth}`;
        
        console.log(`–ó–∞–ø—Ä–æ—Å –∫: ${url}`);
        
        https.get(url, (response) => {
            let data = '';
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å—Ç—è–º
            response.on('data', (chunk) => {
                data += chunk;
            });
            
            // –ö–æ–≥–¥–∞ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
            response.on('end', () => {
                try {
                    if (response.statusCode === 200) {
                        // –ü–∞—Ä—Å–∏–º CSV –¥–∞–Ω–Ω—ã–µ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ)
                        const lines = data.trim().split('\n');
                        
                        if (lines.length >= 1) {
                            // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É (—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ)
                            const lastLine = lines[lines.length - 1];
                            const values = lastLine.split(',');
                            
                            // –§–æ—Ä–º–∞—Ç: Date,Open,High,Low,Close,Volume
                            if (values.length >= 5) {
                                const date = values[0];
                                const open = values[1];
                                const high = values[2];
                                const low = values[3];
                                const close = values[4]; // –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (—Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞)
                                const volume = values[5];
                                
                                console.log(`\nüìà ${symbol} - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${close}`);
                                console.log(`üìÖ –î–∞—Ç–∞: ${date}`);
                                console.log(`üìä –î–µ—Ç–∞–ª–∏ —Ç–æ—Ä–≥–æ–≤:`);
                                console.log(`   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç–∏–µ: ${open}`);
                                console.log(`   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: ${high}`);
                                console.log(`   ‚Ä¢ –ú–∏–Ω–∏–º—É–º: ${low}`);
                                console.log(`   ‚Ä¢ –ó–∞–∫—Ä—ã—Ç–∏–µ: ${close}`);
                                console.log(`   ‚Ä¢ –û–±—ä–µ–º: ${volume}`);
                                
                                resolve({ 
                                    symbol, 
                                    price: close,
                                    date,
                                    open,
                                    high, 
                                    low,
                                    volume 
                                });
                            } else {
                                console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö CSV');
                                console.log('üìÑ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞:', lastLine);
                                reject(new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç CSV –¥–∞–Ω–Ω—ã—Ö'));
                            }
                        } else {
                            console.log('‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
                            console.log('üìÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
                            reject(new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç'));
                        }
                    } else {
                        console.log(`‚ùå HTTP –æ—à–∏–±–∫–∞: ${response.statusCode}`);
                        console.log('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
                        reject(new Error(`HTTP ${response.statusCode}: ${data}`));
                    }
                } catch (error) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message);
                    console.log('üìÑ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', data.substring(0, 500) + '...');
                    reject(error);
                }
            });
            
        }).on('error', (error) => {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
            reject(error);
        });
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (–∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥)
async function getCurrentPrice(symbol) {
    try {
        const result = await getStockPrice(symbol);
        console.log(`üí∞ ${symbol}: ${result.price}`);
        return result.price;
    } catch (error) {
        console.log(`‚ùå ${symbol}: –û—à–∏–±–∫–∞ - ${error.message}`);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ü–∏–π
async function getMultipleStocks(symbols) {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    for (const symbol of symbols) {
        try {
            await getStockPrice(symbol);
            console.log('‚îÄ'.repeat(50));
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${symbol}:`, error.message);
            console.log('‚îÄ'.repeat(50));
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
function startPriceMonitoring(symbols = [config.symbol], intervalSeconds = 30) {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ ${intervalSeconds} —Å–µ–∫—É–Ω–¥...`);
    console.log(`üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∞–∫—Ü–∏–∏: ${symbols.join(', ')}`);
    console.log(`‚è∞ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: ${new Date().toLocaleString()}`);
    console.log('‚îÄ'.repeat(60));
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
    monitorPrices(symbols);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    const interval = setInterval(() => {
        monitorPrices(symbols);
    }, intervalSeconds * 1000);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    return () => {
        clearInterval(interval);
        console.log('\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)
async function monitorPrices(symbols) {
    const timestamp = new Date().toLocaleTimeString();
    console.log(`\nüïê ${timestamp} - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω:`);
    
    for (const symbol of symbols) {
        try {
            const result = await getCurrentPrice(symbol);
            // getCurrentPrice —É–∂–µ –≤—ã–≤–æ–¥–∏—Ç —Ü–µ–Ω—É, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        } catch (error) {
            console.log(`‚ùå ${symbol}: –û—à–∏–±–∫–∞ - ${error.message}`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ü–∏–π
        if (symbols.length > 1) {
            await new Promise(resolve => setTimeout(resolve, 500));
        }
    }
    console.log('‚îÄ'.repeat(40));
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    console.log('üéØ FinViz Elite Price Monitor');
    console.log('='.repeat(50));
    
    // –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:
    const mode = process.argv[2] || 'once'; // 'once', 'monitor', 'test'
    
    switch (mode) {
        case 'monitor':
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            console.log('üìà –†–µ–∂–∏–º: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
            const stopMonitoring = startPriceMonitoring([config.symbol], 30);
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            process.on('SIGINT', () => {
                console.log('\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
                stopMonitoring();
                process.exit(0);
            });
            break;
            
        case 'multi':
            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ü–∏–π
            console.log('üìä –†–µ–∂–∏–º: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ü–∏–π');
            const symbols = ['MSFT', 'AAPL', 'GOOGL', 'TSLA'];
            const stopMulti = startPriceMonitoring(symbols, 30);
            
            process.on('SIGINT', () => {
                console.log('\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
                stopMulti();
                process.exit(0);
            });
            break;
            
        case 'test':
            // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ
            console.log('üîç –†–µ–∂–∏–º: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
            try {
                await getStockPrice(config.symbol);
                console.log('\nüí∞ –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥:');
                await getCurrentPrice(config.symbol);
            } catch (error) {
                console.log('üí• –û—à–∏–±–∫–∞:', error.message);
            }
            break;
            
        default:
            // –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            console.log('‚ö° –†–µ–∂–∏–º: –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫');
            try {
                await getCurrentPrice(config.symbol);
                
                console.log('\nüí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
                console.log('  node server.js monitor  - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫');
                console.log('  node server.js multi    - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫—Ü–∏–π');
                console.log('  node server.js test     - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
                console.log('  node server.js          - –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
            } catch (error) {
                console.log('üí• –û—à–∏–±–∫–∞:', error.message);
            }
            break;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export {
    getStockPrice,
    getCurrentPrice,
    getMultipleStocks,
    startPriceMonitoring,
    monitorPrices,
    config
};

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
main();